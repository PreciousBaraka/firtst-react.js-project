generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  fullName     String
  email        String   @unique
  phoneNumber  String
  password     String
  type         UserType @default(PATIENT)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isActive     Boolean  @default(true)
  doctor       Doctor?
  patient      Patient?

  @@map("users")
}

model Doctor {
  id              String                 @default(uuid())
  userId          String                 @unique
  user            User                   @relation(fields: [userId], references: [id])
  role            Role                   @relation(fields: [roleId], references: [id])
  roleId          String
  nationalIdNo String   @unique
  admission Admission[]
  specialization  SpecializationType
  specializations DoctorSpecialization[] // Add this line

  @@index([id])
  @@map("doctors")
}

model Patient {
  id     String @id @default(uuid())
  userId String @unique
  age    Int
  nationalIdNo String   @unique
  user   User   @relation(fields: [userId], references: [id])
  admission Admission[]
  postTreatmentRecord PostTreatmentRecord[]
@@index([id])
@@map("patients")
}

model Role {
  id          String   @id @default(uuid())
  name        RoleType @unique @default(NORMAL)
  description String
  doctor      Doctor[]

  @@index([id])
  @@map("roles")
}

model Specialization {
  id      String                 @id @default(uuid())
  name    String                 @unique
  doctors DoctorSpecialization[]

  @@map("specializations")
}

model DoctorSpecialization {
  doctorId         String
  specializationId String
  specializationType SpecializationType @unique @default(GENERAL_SURGERY)
  doctor         Doctor         @relation(fields: [doctorId], references: [userId])
  specialization Specialization @relation(fields: [specializationId], references: [id])

  @@id([doctorId, specializationId])
  @@map("doctor_specializations")
}
model Admission {
  id                  String           @id @default(uuid())
  patientId           String
  doctorId            String
  timeIn              DateTime
  dischargeAt         DateTime?
  patientDescription  String
  updatedAt           DateTime         @updatedAt
  patient             Patient          @relation(fields: [patientId], references: [id])
  doctor              Doctor           @relation(fields: [doctorId], references: [userId])
  treatmentRecords    TreatmentRecord[]

  @@map("admissions")
}

model TreatmentRecord {
  id            String       @id @default(uuid())
  admissionId   String
  diagnosis     String
  symptoms      String
  prescription  String
  time          DateTime

  admission     Admission    @relation(fields: [admissionId], references: [id])
  postTreatment PostTreatmentRecord?

  @@map("treatment_records")
}

model PostTreatmentRecord {
  id             String       @id @default(uuid())
  treatmentId    String       @unique
  patientId      String
  postSymptoms   String
  dateAndTime    DateTime
  notes          String

  treatment      TreatmentRecord  @relation(fields: [treatmentId], references: [id])
  patient        Patient          @relation(fields: [patientId], references: [id])
  feedback       PostTreatmentFeedback?

  @@map("post_treatment_records")
}

model PostTreatmentFeedback {
  id                   String     @id @default(uuid())
  postTreatmentRecordId String    @unique
  prescription         String
  dateTime             DateTime
  notes                String

  postTreatmentRecord  PostTreatmentRecord @relation(fields: [postTreatmentRecordId], references: [id])

  @@map("post_treatment_feedback")
}

enum SpecializationType {
  GENERAL_SURGERY
  NEUROSURGERY
  ORTHOPEDIC_SURGERY
  CARDIOTHORACIC_SURGERY
  VASCULAR_SURGERY
  PEDIATRIC_SURGERY
  ENT_SURGERY
  OPHTHALMIC_SURGERY
  PLASTIC_SURGERY
  UROLOGIC_SURGERY
  TRAUMA_SURGERY
  COLORECTAL_SURGERY
  GYNECOLOGIC_SURGERY
}

enum RoleType {
  NORMAL
  MANAGER
}

enum UserType {
  DOCTOR
  PATIENT
}
