generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  fullName     String
  email        String         @unique
  phoneNumber  String
  password     String
  roleId       String
  role         Role     @relation(fields: [roleId], references: [id])
  doctor       Doctor[]
  patient      Patient[]
  receptionist Receptionist[]
  isActive     Boolean        @default(true)
  type         UserType

  @@map("users")
}

model Role {
  id          String   @id @default(uuid())
  description String
  name        RoleType @unique @default(NORMAL)
  doctor      Doctor[]
  receptionist Receptionist[]
  user User[]

  @@index([id])
  @@map("roles")
}

model Patient {
  id                  String                @id @default(uuid())
  fullName            String
  email               String                @unique
  phoneNumber         String
  dateOfBirth         DateTime
  gender              String
  address             String
  nationalIdNo        String                @unique
  userId              String
  createdAt           DateTime              @default(now())
  hospitalVisits      HospitalVisit[]
  treatmentRecords    TreatmentRecord[]
  patientQueries      PatientQuery[]
  postTreatmentRecord PostTreatmentRecord[]
  user                User                  @relation(fields: [userId], references: [id])

  @@index([id])
  @@map("patients")
}

model Doctor {
  id                   String                @id @default(uuid())
  fullName             String
  email                String                @unique
  phoneNumber          String
  specialization       String
  roleId               String
  userId               String
  user                 User                  @relation(fields: [userId], references: [id])
  role                 Role                 @relation(fields: [roleId], references: [id])
  nationalIdNo         String                @unique
  createdAt            DateTime              @default(now())
  treatmentRecord      TreatmentRecord[]
  hospitalVisits       HospitalVisit[]
  postTreatmentRecords PostTreatmentRecord[]
  doctorResponses      DoctorResponse[]

  @@index([id, nationalIdNo])
  @@index([roleId], map: "doctors_roleId_fkey")
  @@map("doctors")
}

model Receptionist {
  id             String          @id @default(uuid())
  fullName       String
  email          String          @unique
  phoneNumber    String
  nationalIdNo   String          @unique
  userId         String
  roleId         String
  role           Role     @relation(fields: [roleId], references: [id])
  createdAt      DateTime        @default(now())
  user           User            @relation(fields: [userId], references: [id])
  hospitalVisits HospitalVisit[]

  @@index([id])
  @@map("receptionists")
}

model Manager {
  id           String   @id @default(uuid())
  fullName     String
  email        String   @unique
  phoneNumber  String
  nationalIdNo String   @unique
  createdAt    DateTime @default(now())

  @@index([id])
  @@map("managers")
}

model HospitalVisit {
  id             String   @id @default(uuid())
  patientId      String
  receptionistId String
  doctorId       String
  visitDate      DateTime
  reason         String
  createdAt      DateTime @default(now())

  treatmentRecord TreatmentRecord[]
  patient         Patient           @relation(fields: [patientId], references: [id])
  receptionist    Receptionist      @relation(fields: [receptionistId], references: [id])
  doctor          Doctor            @relation(fields: [doctorId], references: [id])

  @@index([id])
  @@map("hospital_visits")
}

model TreatmentRecord {
  id              String          @id @default(uuid())
  hospitalVisitId String
  doctorId        String
  vitals          String
  treatmentPlan   String
  painLevel       Int
  mobility        String
  symptoms        String
  temperature     Float
  patientId       String
  status          TreatmentStatus @default(ACTIVE)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  hospitalVisit       HospitalVisit         @relation(fields: [hospitalVisitId], references: [id])
  doctor              Doctor                @relation(fields: [doctorId], references: [id])
  patient             Patient               @relation(fields: [patientId], references: [id])
  postTreatmentRecord PostTreatmentRecord[]
  patientQueries      PatientQuery[]

  @@index([id])
  @@map("treatment_records")
}

model PatientQuery {
  id                    String               @id @default(uuid())
  patientId             String
  doctorId              String
  treatmentRecordId     String
  message               String
  status                PatientQueryStatus   @default(RESPONDED)
  createdAt             DateTime             @default(now())
  patient               Patient              @relation(fields: [patientId], references: [id])
  treatmentRecord       TreatmentRecord      @relation(fields: [treatmentRecordId], references: [id])
  postTreatmentRecord   PostTreatmentRecord? @relation(fields: [postTreatmentRecordId], references: [id])
  doctorResponses       DoctorResponse[]
  postTreatmentRecordId String?

  @@index([id])
  @@map("patient_queries")
}

model PostTreatmentRecord {
  id                String   @id @default(uuid())
  treatmentRecordId String
  patientId         String
  patientQueryId    String
  doctorId          String
  followUpPlan      String
  observations      String
  recoveryStatus    String
  notes             String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  treatmentRecord TreatmentRecord @relation(fields: [treatmentRecordId], references: [id])
  patient         Patient         @relation(fields: [patientId], references: [id])
  Doctor          Doctor          @relation(fields: [doctorId], references: [id])
  PatientQuery    PatientQuery[]

  @@index([id])
  @@map("post_treatment_records")
}

model DoctorResponse {
  id              String               @id @default(uuid())
  patientQueryId  String
  doctorId        String
  responseMessage String
  status          DoctorResponseStatus @default(PENDING)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt

  patientQuery PatientQuery @relation(fields: [patientQueryId], references: [id])
  doctor       Doctor       @relation(fields: [doctorId], references: [id])

  @@index([id])
  @@map("doctor_responses")
}

enum UserType {
  PATIENT
  DOCTOR
  RECEPTIONIST
  MANAGER
}

enum RoleType {
  NORMAL
  MANAGER
}

enum TreatmentStatus {
  ACTIVE
  COMPLETED
  DISCHARGED
}

enum PatientQueryStatus {
  PENDING
  RESPONDED
  CLOSED
}

enum DoctorResponseStatus {
  PENDING
  RESPONDED
  CLOSED
}
